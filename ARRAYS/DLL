class ListNode {
    int data;
    ListNode next;

    ListNode(int data) {
        this.data = data;
        this.next = null;
    }
}
class Linkedlist {
    /// ///////////////////////////////
    void insert_at_begin(int data) {
        ListNode head;
        ListNode newnode = new ListNode(data);
        if (head == null) {
            head = newnode;
            return;
        }
        newnode.next = head;
        head = newnode;
    }

    /// ////////////////
    void insert_at_end(int data) {
        ListNode newnode = new ListNode(data);
        if (head == null) {
            head = newnode;
            return;
        }
        ListNode temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newnode;
    }

    void insert_at_position(int data, int pos) {
        ListNode head;
        ListNode newnode = new ListNode(data);
        ListNode temp = head;
        if (pos < 1) {
            System.out.println("invalid position");
            return;
        }
        if (pos == 1) {
            newnode.next = head;
            if (head != null)
                head.prev = newnode;
        }
                ListNode head =newnode;
            temp=head;
            int count=1;
            while(count< pos-1 && temp!=null) {
            temp = temp.next;
            count++;
            }
        if (temp == null) {
            System.out.println("position out of range");
            return;
        }

        newnode.next = temp.next;
        temp.next = newnode;
    }
    void delete_at_begin(){
        ListNode head;
        ListNode temp;
        if(head==null){
            System.out.println("dll is empty");
        }
        if(head.next==null) {
            head = null
        }
        return;
        temp=head;
        head=head.next;
        head.prev=null

        }s
    }
}
    public class Main {
        public static void main(String[] args) {
            Linkedlist ob = new Linkedlist();

            ob.insert_at_position(444, 2);
            ob.traversal();
    }
}
